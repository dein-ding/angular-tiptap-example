import { FormattingButton } from './types';

// @TOOD: add '.can()' feature
export const formattingControls: FormattingButton[] = [
    {
        configKey: 'bold',
        title: 'Bold',
        slot: '<b>B</b>',
        isActive: (editor) => editor.isActive('bold'),
        action: (chain) => chain.toggleBold(),
        testName: 'bold',
    },
    {
        configKey: 'italic',
        title: 'Italic',
        slot: '<i>I</i>',
        isActive: (editor) => editor.isActive('italic'),
        action: (chain) => chain.toggleItalic(),
        testName: 'italic',
    },
    {
        configKey: 'strike',
        title: 'Strikethrough',
        slot: '<s>S</s>',
        isActive: (editor) => editor.isActive('strike'),
        action: (chain) => chain.toggleStrike(),
        testName: 'strike',
    },
    {
        configKey: 'headings',
        title: 'Heading 1',
        slot: 'H1',
        isActive: (editor) => editor.isActive('heading', { level: 1 }),
        action: (chain) => chain.toggleHeading({ level: 1 }),
        testName: 'h1',
    },
    {
        configKey: 'headings',
        title: 'Heading 2',
        slot: 'H2',
        isActive: (editor) => editor.isActive('heading', { level: 2 }),
        action: (chain) => chain.toggleHeading({ level: 2 }),
        testName: 'h2',
    },
    {
        configKey: 'headings',
        title: 'Heading 3',
        slot: 'H3',
        isActive: (editor) => editor.isActive('heading', { level: 3 }),
        action: (chain) => chain.toggleHeading({ level: 3 }),
        testName: 'h3',
    },
    {
        configKey: 'headings',
        title: 'Paragraph',
        slot: 'P',
        isActive: (editor) => editor.isActive('paragraph'),
        action: (chain) => chain.setParagraph(),
        testName: 'p',
    },
    {
        configKey: 'rule',
        title: 'Horizontal Rule (Line)',
        slot: 'Hr',
        action: (chain) => chain.setHorizontalRule(),
        testName: 'rule',
    },
    {
        configKey: 'lists',
        title: 'Bulleted List',
        slot: 'ul',
        isActive: (editor) => editor.isActive('bulletList'),
        action: (chain) => chain.toggleBulletList(),
        testName: 'ul',
    },
    {
        configKey: 'lists',
        title: 'Ordered List',
        slot: 'ol',
        isActive: (editor) => editor.isActive('orderedList'),
        action: (chain) => chain.toggleOrderedList(),
        testName: 'ol',
    },
    {
        configKey: 'lists',
        title: 'Task List',
        slot: 'tl',
        isActive: (editor) => editor.isActive('taskList'),
        action: (chain) => chain.toggleTaskList(),
        testName: 'tl',
    },
    {
        configKey: 'code',
        title: 'Inline Code',
        slot: '&lt;/>',
        isActive: (editor) => editor.isActive('code'),
        action: (chain) => chain.toggleCode(),
        testName: 'code',
    },
    {
        configKey: 'code',
        title: 'Code Block',
        slot: '&lt;/> Block',
        isActive: (editor) => editor.isActive('codeBlock'),
        action: (chain) => chain.toggleCodeBlock(),
        testName: 'codeBlock',
    },
    {
        configKey: 'undoRedo',
        title: 'Undo',
        slot: '↺',
        action: (chain) => chain.undo(),
        testName: 'undo',
    },
    {
        configKey: 'undoRedo',
        title: 'Redo',
        slot: '↻',
        action: (chain) => chain.redo(),
        testName: 'redo',
    },
];
